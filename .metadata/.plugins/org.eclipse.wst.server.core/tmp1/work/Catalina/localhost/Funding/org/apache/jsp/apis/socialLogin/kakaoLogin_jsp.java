/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.76
 * Generated at: 2022-04-07 07:12:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apis.socialLogin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kakaoLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("    	.kakaoLoginBtnBox{\n");
      out.write("    		width: 280px;\n");
      out.write("    		height: 40px;\n");
      out.write("    		margin-bottom: 8px;\n");
      out.write("    		background-color: #FDE500;\n");
      out.write("    		overflow: hidden;\n");
      out.write("    	}\n");
      out.write("    	.kakaoLoginBtnBox p{\n");
      out.write("    		text-decoration:: none;\n");
      out.write("    		margin: 0;\n");
      out.write("    		line-height: 42px;\n");
      out.write("    		float:left;\n");
      out.write("    	}\n");
      out.write("    	.kakaoLoginBtnBox img{\n");
      out.write("    		height: 100%;\n");
      out.write("    		width: auto;\n");
      out.write("    		margin-right: 24px;\n");
      out.write("    		float:left;\n");
      out.write("    	}\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n");
      out.write("<script>\n");
      out.write("        // SDK를 초기화 합니다. 사용할 앱의 JavaScript 키를 설정해 주세요.\n");
      out.write("        Kakao.init('44993a5d29aa35a541ed1e2b03308678');\n");
      out.write("\n");
      out.write("        // SDK 초기화 여부를 판단합니다.\n");
      out.write("        console.log(Kakao.isInitialized());\n");
      out.write("    </script>\n");
      out.write("<body>\n");
      out.write("<a id=\"custom-login-btn\" href=\"javascript:loginWithKakao()\">\n");
      out.write("<div class=\"kakaoLoginBtnBox\">\n");
      out.write("	<img\n");
      out.write("    src=\"/Funding/apis/socialLogin/kakaoBtn.png\"\n");
      out.write("    width=\"222\"\n");
      out.write("    alt=\"카카오 로그인 버튼\"\n");
      out.write("  />\n");
      out.write("  <p>카카오 로그인</p>\n");
      out.write("</div>\n");
      out.write("  \n");
      out.write("</a>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("  function loginWithKakao() {\n");
      out.write("	  \n");
      out.write("		  \n");
      out.write("    Kakao.Auth.login({\n");
      out.write("    	success: function(authObj) {\n");
      out.write("		      Kakao.API.request({\n");
      out.write("		        url: '/v2/user/me',\n");
      out.write("		        success: function(res) {\n");
      out.write("		          var form = document.createElement('form'); // 폼객체 생성\n");
      out.write("		          var objs;\n");
      out.write("		          objs = document.createElement('input'); // 값이 들어있는 녀석의 형식\n");
      out.write("		          objs.setAttribute('type', 'text'); // 값이 들어있는 녀석의 type\n");
      out.write("		          objs.setAttribute('name', 'email'); // 객체이름\n");
      out.write("		          objs.setAttribute('value', res.kakao_account.email); //객체값\n");
      out.write("		          form.appendChild(objs);\n");
      out.write("		          form.setAttribute('id', 'tempForm');\n");
      out.write("		          form.setAttribute('method', 'post'); //get,post 가능\n");
      out.write("		          form.setAttribute('action', \"/Funding/socialLogin.do\"); //보내는 url > 나중에 login.do로 보내야 함;\n");
      out.write("		          document.body.appendChild(form);\n");
      out.write("		          form.submit();\n");
      out.write("		        },\n");
      out.write("		        fail: function(error) {\n");
      out.write("		          alert(\n");
      out.write("		            'login success, but failed to request user information: ' +\n");
      out.write("		              JSON.stringify(error)\n");
      out.write("		          )\n");
      out.write("		        },\n");
      out.write("		      })\n");
      out.write("		    },\n");
      out.write("      fail: function(err) {\n");
      out.write("        alert(JSON.stringify(err))\n");
      out.write("      },\n");
      out.write("    })\n");
      out.write("  }\n");
      out.write("  \n");
      out.write("  \n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
